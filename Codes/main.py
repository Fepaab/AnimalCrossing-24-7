import asyncio                                                 # Biblioteca para opera√ß√µes ass√≠ncronas
import datetime                                                # Biblioteca para manipula√ß√£o de datas e hor√°rios
import discord                                                 # Biblioteca principal para intera√ß√£o com o Discord
from discord.ext import commands                               # Extens√£o para criar comandos no bot
from discord.ui import View, Select                            # Para criar menus suspensos e views
from discord import FFmpegPCMAudio                             # Para reprodu√ß√£o de √°udio via FFmpeg
from apikeys import TOKEN, ID_CANAL_VOZ                        # Importa o token e o ID do canal de voz
from intents import get_intents                                # Importa a fun√ß√£o para configurar intents do bot
from musicaandtime import nowplaying, horario, meridiantime    # Fun√ß√µes auxiliares para m√∫sica e hor√°rio

# Configura os intents do bot
intents = get_intents()
client = commands.Bot(command_prefix='!', intents=intents)  # Define o prefixo dos comandos do bot

# Define valores padr√£o para as vari√°veis globais
selected_game = "newhorizons"  # Valor padr√£o inicial para o jogo
selected_weather = "sunny"     # Valor padr√£o inicial para o clima

# --------------------------------------------------------------------
# Comando: !select
# Exibe menus suspensos para o usu√°rio selecionar um jogo e um clima
# --------------------------------------------------------------------
@client.command(name='select')
async def select(ctx):
    global selected_game, selected_weather  # Permite modificar as vari√°veis globais

    # Callback para tratar a sele√ß√£o do menu de jogos
    async def select_callback(interaction):
        global selected_game  # Certifica-se de que a vari√°vel global seja usada
        selected_game = menu_select.values[0]  # Atualiza a vari√°vel com o valor selecionado
        await interaction.response.send_message(f"Voc√™ escolheu o jogo: {selected_game}")
        print(f'{horario()} INFO     O jogo selecionado √©: {selected_game}')  # Exibe no terminal

    # Callback para tratar a sele√ß√£o do menu de climas
    async def weather_callback(interaction):
        global selected_weather  # Certifica-se de que a vari√°vel global seja usada
        selected_weather = weather_select.values[0]  # Atualiza a vari√°vel com o valor selecionado
        await interaction.response.send_message(f"Voc√™ escolheu o clima: {selected_weather}")
        print(f'{horario()} INFO     O clima selecionado √©: {selected_weather}')  # Exibe no terminal

    # Cria o menu suspenso com as op√ß√µes de jogos
    menu_select = Select(
        placeholder="Escolha um jogo: ",
        options=[
            discord.SelectOption(label='Animal Crossing: GameCube', emoji='‚ñ∂Ô∏è', value='gamecube'),
            discord.SelectOption(label='Animal Crossing: City Folk/Wild World', emoji='‚ñ∂Ô∏è', value='cityfolk'),
            discord.SelectOption(label='Animal Crossing: New Leaf', emoji='‚ñ∂Ô∏è', value='newleaf'),
            discord.SelectOption(label='Animal Crossing: New Horizons', emoji='‚ñ∂Ô∏è', value='newhorizons')
        ]
    )
    menu_select.callback = select_callback  # Define o callback para o menu de jogos

    # Cria o menu suspenso com as op√ß√µes de climas
    weather_select = Select(
        placeholder="Escolha um clima: ",
        options=[
            discord.SelectOption(label='Sunny', emoji='‚òÄÔ∏è', value='sunny'),
            discord.SelectOption(label='Snowy', emoji='‚ùÑÔ∏è', value='snowy'),
            discord.SelectOption(label='Rainy', emoji='üåßÔ∏è', value='rainy')
        ]
    )
    weather_select.callback = weather_callback  # Define o callback para o menu de climas

    # Cria uma view e adiciona os menus suspensos
    view = View()
    view.add_item(menu_select)
    view.add_item(weather_select)

    # Envia a mensagem com os menus suspensos
    await ctx.send('Escolha um jogo e um clima:', view=view)
    print(f'{horario()} INFO     Menus enviados para {ctx.author.name}.')

# --------------------------------------------------------------------
# Comando: !play
# Conecta o bot ao canal de voz e toca m√∫sicas baseadas no hor√°rio, jogo e clima selecionados
# --------------------------------------------------------------------
@client.command(name='play')
async def play(ctx):
    global selected_game, selected_weather  # Certifica-se de usar as vari√°veis globais
    channel = ctx.message.author.voice.channel  # Obt√©m o canal de voz do autor do comando
    voice = await channel.connect()  # Conecta ao canal de voz
    
    try:
        current_music = None  # Vari√°vel para armazenar a m√∫sica atual
        while True:  # Loop infinito para manter o bot tocando m√∫sicas
            nomemusica = meridiantime()  # Obt√©m o nome da m√∫sica com base no hor√°rio atual
            
            # Se a m√∫sica atual terminou ou √© a primeira execu√ß√£o, troca para a nova m√∫sica
            if current_music != nomemusica:
                current_music = nomemusica
                print(f'{horario()} INFO     Tocando m√∫sica: {current_music} do jogo {selected_game} com clima {selected_weather}')
            
            # Se a m√∫sica n√£o est√° tocando, reinicia a reprodu√ß√£o
            if not voice.is_playing():
                source = FFmpegPCMAudio(f'Audios/{selected_game}/{selected_weather}/{current_music}.mp3')
                voice.play(source)
            
            # Aguarda um curto intervalo antes de verificar novamente
            await asyncio.sleep(1)
    except Exception as e:
        print(f'{horario()} ERROR    Ocorreu um erro: {e}')
    finally:
        await voice.disconnect()  # Garante que o bot ser√° desconectado ao sair do loop

# --------------------------------------------------------------------
# Comando: !stop
# Desconecta o bot do canal de voz e encerra sua execu√ß√£o
# --------------------------------------------------------------------
@client.command(name='stop')
async def stop(ctx):
    """Comando para parar o bot e desconect√°-lo."""
    # Desconecta do canal de voz, se conectado
    voice_client = discord.utils.get(client.voice_clients, guild=ctx.guild)
    if voice_client and voice_client.is_connected():
        await voice_client.disconnect()
        print(f'{horario()} INFO     O bot foi desconectado do canal de voz.')

    # Envia uma mensagem de confirma√ß√£o no canal de texto
    await ctx.send("Saindo da call! At√© mais!")

# --------------------------------------------------------------------
# Comando: !refresh
# Reinicia a m√∫sica atual que est√° sendo tocada
# --------------------------------------------------------------------
@client.command(name='refresh')
async def refresh(ctx):
    global selected_game, selected_weather  # Certifica-se de usar as vari√°veis globais

    # Obt√©m o canal de voz do autor do comando
    voice_client = discord.utils.get(client.voice_clients, guild=ctx.guild)
    if not voice_client or not voice_client.is_connected():
        await ctx.send("O bot n√£o est√° conectado a nenhum canal de voz.")
        return

    try:
        # Obt√©m a m√∫sica atual com base no hor√°rio
        current_music = meridiantime()
        print(f'{horario()} INFO     Reiniciando m√∫sica: {current_music} do jogo {selected_game} com clima {selected_weather}')

        # Reinicia a m√∫sica
        source = FFmpegPCMAudio(f'Audios/{selected_game}/{selected_weather}/{current_music}.mp3')
        voice_client.stop()  # Para a m√∫sica atual
        voice_client.play(source)  # Reproduz a m√∫sica novamente

        await ctx.send(f"A m√∫sica foi reiniciada: {current_music} do jogo {selected_game} com clima {selected_weather}.")
    except Exception as e:
        print(f'{horario()} ERROR    Ocorreu um erro ao reiniciar a m√∫sica: {e}')
        await ctx.send("Ocorreu um erro ao tentar reiniciar a m√∫sica.")

# --------------------------------------------------------------------
# Evento: on_ready
# Executado quando o bot √© iniciado com sucesso
# --------------------------------------------------------------------
@client.event
async def on_ready():
    print(f'{horario()} INFO     O Bot foi iniciado, logando como: {client.user}')
    print(f'{horario()} --------------------------------------------------------------------')

# --------------------------------------------------------------------
# Comando: !musica
# Exibe a m√∫sica que est√° sendo tocada no momento
# --------------------------------------------------------------------
@client.command(name='musica')
async def musica(ctx):
    await ctx.send(nowplaying())  # Envia a m√∫sica atual como mensagem no canal de texto

# --------------------------------------------------------------------
# Evento: on_voice_state_update
# Verifica mudan√ßas no estado de voz dos usu√°rios e desconecta o bot se ele estiver sozinho
# --------------------------------------------------------------------
@client.event
async def on_voice_state_update(member, before, after):
    channel = client.get_channel(ID_CANAL_VOZ)  # Usa o ID do canal de voz do arquivo apikeys.py
    
    # Verifica se o bot est√° sozinho no canal de voz
    voice_client = discord.utils.get(client.voice_clients, guild=member.guild)
    if voice_client and voice_client.channel:  # Verifica se o bot est√° conectado
        if len(voice_client.channel.members) == 1:  # Apenas o bot est√° no canal
            print(f'{horario()} INFO     O canal de voz {voice_client.channel.name} est√° vazio. Desconectando...')
            await voice_client.disconnect()

@client.command(name='help')
async def help_command(ctx):
    """Comando para exibir a lista de comandos dispon√≠veis."""
    help_message = (
        "Aqui est√£o os comandos dispon√≠veis:\n"
        "!select - Escolha um jogo e um clima.\n"
        "!play - Inicia a reprodu√ß√£o de m√∫sicas.\n"
        "!stop - Para a reprodu√ß√£o e desconecta do canal de voz.\n"
        "!refresh - Reinicia a m√∫sica atual.\n"
        "!musica - Exibe a m√∫sica que est√° sendo tocada no momento.\n"
        "!help - Exibe esta mensagem de ajuda."
    )
    await ctx.send(help_message)


# --------------------------------------------------------------------
# Inicia o bot com o token fornecido
# --------------------------------------------------------------------
client.run(TOKEN)
